============= Props (properties) =============

- Vue has a unidirectional data flow
- Parents -> Children
- Components receive props from parents
- Props should be detailed in collaborative environments!
- Props are like variables sent from parent
- data() is still used, but it is local variables accessible by just that one component
- if we have a prop that needs a javascript value other than a string, we need to use v-bind
- Props being passed by parents are named-like-this
- Component props being received are namedLikeThis
- Prop types:
    + String
    + Number
    + Boolean
    + Array
    + Object
    + Date
    + Function
    + Symbol

Validating Props:
    ** App.vue **
    <template>
        <friend-contact>
            name="Arri Evans"
            phone-number="123 456 7890"
            :is-favorite="true"
        </friend-contact>
    </template

    ** Component.vue **
    props: {
        name: {
            type: String,
            required: true
        }
        phoneNumber: String,
        emailAddress: String,
        isFavorite: {
            type: Boolean,
            required: false,
            default: false,
        }
    }



Refactor with v-for:
     ** App.vue **
     <template>
            <friend-contact>
                v-for="friend in friends"
                :key="friend.id"
                :id="friend.id"
                :name="friend.name"
                :phone-number="friend.phone"
                :email-address="friend.address"
                :is-favorite="true"
            </friend-contact>
        </template



Child => Parent Communication:
- props pass data from App.vue to components
- emitting custom events in the component allows your parent to listen for an event
- custom events are always named-like-this
- listen for events using v-on or @
- this allows unidirectional data flow, in both directions! App =< Component && Component => App
- Emit custom event from component, and listen for this custom event in App.vue, and feed updated data back to component

    ** Component.vue **
    methods: {
        toggleIsFavorite() {
            this.$emit('toggle-favorite', this.id);
        }
    }

    ** App.vue **
    <template>
        <friend-contact>
            @toggle-favorite="true"
        </friend-contact>
    </template>

    <script>
        method: {
            toggleFavoriteStatus(friendId) {
                const friend = this.friends.find(friend => friend.id === friendId);
                friend.isFavorite = !isFavorite;
            }
        }
    </script>


Defining & Validating Custom Events:
    ** Component.vue **
    emits: [ 'toggle-favorite']
        OR
    emits: {
        'toggle-favorite': function (id) {}
    }
        OR
    emits: {
        'toggle-favorite': function (id) {
            if (id) { return true; }
            else {
                console.warn("Missing Id!");
                return false;
            }
        }
    }





ADDING BRAND NEW COMPONENT:
   ** NewFriend Component.vue **
    <template>
        <form @submit.prevent="submitData">
            <div>
                <label for="name">Name: </label>
                <input id="name" type="text" v-model="name" />
            </div>
            <div>
                <label for="phone">Phone Number: </label>
                <input id="phone" type="tel" v-model="phone" />
            </div>
            <div>
                <label for="email">Email: </label>
                <input id="email" type="email" v-model="email" />
            </div>
            <button type="submit">Add Contact<button>
        </form>
    </template>

    <script>
    export default {
        emit: ['add-contact'],
        data() {
            name: "",
            phone: "",
            email: ""
        },
        method: {
            submitData () {
               this.$emit('add-contact', this.name, this.phone, this.email)
            }
        }
    };
    </script>

    <style>
    </style>


   ** NewFriend Component.vue **
    import { createApp } from 'vue';
    import App from './App.vue';
    import NewFriend from '.components/NewFriend.vue';

    const app = createApp(App);
    app.component('new-friend', NewFriend)
    app.mount('#app');


    ** App.vue **
    <template>
        <new-friend @add-contact="addContact"></new-friend>
    </template>

    <script>
        methods: {
            addContact(name, phone, email){
                const friendContact = {
                    id: new Date().toISOString(),
                    name: name,
                    phone: phone,
                    email: email,
                    isFavorite: false
                }
                this.friends.push(friendContact);
            }
        }
    </script>


    DELETE REFRESHER:
    list = list.filter(itm => itm != deletable)
