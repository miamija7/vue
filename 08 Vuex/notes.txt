///////// State Management with Vuex /////////

*replaces provide/inject*

What is Vuex?
- Vuex is a library for managing global state
- state is data your application that is reactive
- state is either local or global
    + local is component data
    + global is data for the entire app
- managing app wide/global state can be difficult
    + fat components
    + unpredictable
    + rror-prone
- with vuex
    + outsourced state
    + predictable state management / flow
    + clearly defined data flow: less errors

Project | vue-app-vuex 
% npm install
% npm instal --save vuex@next
% npm run serve


How Vuex Works
- mutations -> App-wide, central data/state store <---> components
- mutations are clearly defined methods that have the logic to update the state
- components should trigger mutations, not directly modify the state


     ------------>  Mutations
    |                   |
    |                   |
 Actions        App-wide data store  ---> Getters
    |           /state store                |
    |                                       |
    -----------------------------------------


Actions
- can be asyncronous
- recieves context object
- you should never directly modify the state, use mutations for that
- executes mutations: 
    actions:{
        increment(context){
            context.commit('increment');
        }
    }
    //In App
    his.$store.dispatch


Mutations
- directly modifies the state/data

Getters
- getting into our store

Mappers
- in components, use mapGetters for computed properties instead of this.$store.getters.finalCounter 
    <script>
        import {mapGetters} from 'vuex';

        export default{
            computed: {
                ...mapGetters(['finalCounter])
            }
        }
    </script>