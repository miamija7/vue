============= V-models & Inputs =============

v-bind="userAge" ref="ageInput"         this.$refs.ageInput.value   //STRING
v-model=""userAge"                      this.userAge                // NUMBER


FORM INPUTS                 VUE FEATURE     START TYPE
text                        v-model         init with empty string
number                      v-model         init with null
select                      v-model         init it with preferred default string value
checkboxes                  v-model         init with [] OR true/false (for single checkboxes)
radio buttons               v-model         init with null

VUE MODEL FEATURES
.number             force type conversion to number
.trim               remove leading/trailing whitespace
.lazy               update variable at a lower frequency

============= Input Validation =============

<template>
    ...
    <... v-model.trim="name" @blur="validateInput" :class={invalid: nameValidation === 'invalid'} />
    <p v-if="nameValidation === 'invalid'">Please enter a valid name!</p>
    ...
</template>

<script>
    data() {
        name = "",
        nameValidation = "Pending"
    },
    methods: {
        validateInput() {
            if (name === "") { nameValidation = 'invalid' }
            else { nameValidation = 'valid' }
        },
    }
</script>

<style scoped>
    input.invalid {
        border-color: red;
    }
</style>


============= Custom Input =============


@input="" :value=""                         ===         v-model=""
:model-value="" @update:modelValue=""       ===         v-model=""

** Custom Model **
<template>
    <... :class="{ active: modelValue === 'poor/average/great'}""
</template>

<script>
export default {
    props: ['modelValue'],
    emits: ['update:modelValue'],
    // NOT REACTIVE (USE COMPUTED)
    data() {
        return{
            activeOption: this.modelValue,
        }
    },
    // REACTIVE (BUT USE modelValue IN TEMPLATE FOR BEST SOLUTION)
    computed: {
        activeOption() {
            return this.modelValue;
        }
    },
    methods: {
        active(option) {
            this.activeOption = option,
            this.$emit('update:modelValue', option)
        }
    }
}
</script>
