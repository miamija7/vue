============= Component Introduction =============

Components:
- needs 2 things: custom multiword HTML tag & config object
- View comonent is just another Vue app
- "Mini Apps"

    app.compnent('friend-contact', {
        data() {
            return {detailsAreVisible: fase };
        },
        methods: {
            toggleDetails() {
                this.detailsAreVisible = !this.detailsAreVisible;
            }
        }
    })

- it needs a template
- we don't mount this Component
- we neet to add a template option!
- COMPNENTS are small reusable pieces of HTML with connected data and logic!
- compenents are mini apps in a Vue main app


============= Component Deep Dive =============


OVERVIEW:
- Component registration & styling
- Slots & dynamic components
- Naming & Folder structure

Registering Components
- when you use the below syntax, you are registering that component globally
    ** main.js **
    app.component('my-component', MyComponent);
- downside: themore components we have the more code packages we have, global registration means they all have to load everything initially
- downside: component useages become blurry when the list grows longer and longer
- keep the app.vue file CLEAN
- SOLUTION: register components locally
    ** App.vue **
    <script>
        import MyComponent from './components/MyComponent.vue'
        export default {
            components: {
                'my-component': MyComponent
                    OR
                MyComponent: MyComponent
                    OR
                MyComponent
            }
        }
    </script>
    <template>
        <MyComponent />
            OR
        <my-component></my-component>
    </template>


STYLING:
- you can create global styles, or component styles
    <style></style>
    <style scoped></style>

SLOTS:
- to make a flexible component with dynamic content you need SLOTS
- slots allot us to receive HTML
    <template>
        <div>
            <slot></slot>
        </div>
    </template>
- multiple slots
-v-slot directive let Vue know which slot content should go to
    <template>
        <div>
            <slot name="header"></slot>
            <slot></slot>
        </div>
    </template>
    <template v-slot:header>
- slots do have fallback content
- in a component with slots, you can use the built-in property $slot to not render empty components
    <template>
        <div>
            <slot name="header" v-if="$slots.header"></slot>
            <slot></slot>
        </div>
    </template>
- shorthand (v-slot: == #)
    <template #header>
- scoped slots
- you can pass props on slots
    ** App.vue **


