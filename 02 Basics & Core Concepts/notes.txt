============= Core Concepts  =============

New Vue App:
- creating vue apps
    const app = Vue.createApp({ ... })
    app.mount('...')

Data Binding:
interpolation       <el>{{ ... }}</el>
binding             <el v-bind:href='...'>...</el>
raw html            <el v-html='...'></el>

App Options:
    data () { ... },
    methods: {
        function() { ... },
        function() { ... }
    }


============= Event Binding =============

TWO WAY BINDING: Listening & Writting 
    v-bind:value="name" v-on:input="setName"
    v-model="name"

NOTE: running one method on your page will run every method on your page

    v-on:click
    @click

    v-bind:value
    :value
    
============= Computed Properties =============

Computed Properties:
- Vue is aware of the dependencies of the computed properties
- it will cache the computed property only if that property changes
- better for outputting values
- if you want to recalculate anytime something changes
- only use computed properties for outputting something
- do not use them as methods/events
- bind events to methods
- do not bind events to computed properties


============= Watchers  =============

- you can use watchers instead of computed properties
- define methods in watchers
- whenever data "name" changes, "name" watcher method will execute automatically
- no returning, just logic
- value is automatically passed & previous value
- alternative for computed property
CONS: if we have two properties.... use computed



============= Methods vs Computed vs Watch =============


METHOD                  COMPUTED                            WATCH
data binding            only data binding                   not in template
event binding           executes on dependency changes      reacts to changed data
re-executes everytime   data depending on data              non-data updates



============= Styling =============

Inline:
    class="demo" :style="{borderColor: a ? 'red' : '#ccc'}"
    :class="a ? 'demo active' : 'demo'"
    :class="{demo: true, active: a}"
    class="demo" :class="{active: a}"
    
Computed Properties:
- removes logic from html
- places logic in computed!

    HTML:       :class="{active: a}"
            to
    HTML:       :class="aClasses"
    COMPUTED:   aClasses() { return {active: a}; }

- binding classes can also be passed an array of objects

    :class="['demo', {active: a}, {anotherClass: truthy/falsy}]"


============= Section Summary =============

DOM & TEMPLATES:
- Vue interacts with the DOM by managing templates that allow you to use Vue features that reflect on the page
- Vue allows you to define the goal, rather than the steps, following the => Declarative Approach
    + You define how the page should look, what parts are dynamic, and Vue figures out how to get there
- Vue connects to the html code via "mount"
    + Vue renders the true DOM based on the connection template
    + CSS selectors are used to turn html code into the template for the Vue app
    + Once there is a connection you can use Vue features

DATA & EVENT BINDING:
- Outputting Data
    + data can be output into templates using "{{ }}" or "v-bind:" or ":"
    + you can bind data via interpolation or bind directives (bind html attributes to some dynamic value)
- Inputting Data
    + listen for events via "v-on" or "@" method

REACTIVITY:
- Vue had a reactivity system
- Vue will update the real DOM for you when bound data ( {{}} / : ) changes
- Register data in the data option of your Vue app
- Computed Properties and Watchers calculate results dynamically or to run some code when data changes

STYLING:
- Vue isn't just text/data input & output
- Dynamic CSS classes and inline style bindings are supported in Vue
- Special syntax's offered for efficient binding
    + object based      :class="{}"
    + array based       :class="[{},{},'']"

